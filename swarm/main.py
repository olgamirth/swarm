import typer
import cv2
import boto3
import marvin
import time
import os
import sys

try:
    from picamera2 import Picamera2, Preview
except ImportError:
    pass

from botocore.exceptions import NoCredentialsError
from datetime import datetime
from decouple import config
from supabase import create_client

app = typer.Typer()


@app.command()
def take_landingboard_photo():
    """
    Use the PiCamera2 module to take a picture of a Langstroth hive landing
    board
    """
    if sys.platform != 'linux':
        typer.echo("This command is only available on Linux")
        return

    beecam = Picamera2()
    camera_config = beecam.create_preview_configuration()
    beecam.configure(camera_config)
    beecam.start_preview(Preview.NULL)
    beecam.start()
    time.sleep(2)

    # It's much easier to determine when the image was taken when filename
    # is in the format bees-YYYYMMDD.sec.jpg
    now = datetime.now()
    iso_datetime = now.strftime("%Y-%m-%dT%H:%M:%S")
    file_name = f"bees-{iso_datetime}.jpg"

    beecam.capture_file(file_name)
    beecam.stop_preview()


@app.command()
def process_bee_photo(file_name: str, x: int = 640, y: int = 480):
    """
    Pre-process the image specified by file_name using OpenCV
    This will include resizing the images to a standard view, converting it
    grayscale, and reducing blur
    """
    if not os.path.isfile(file_name):
        typer.echo(f"Error: The file {file_name} does not exist")
        return

    try:
        # Read the image file"
        image = cv2.imread(file_name)
        if image is None:
            typer.echo(f"Error: the file {file_name} is not a valid image.")
            return

        # resize image to standard size
        std_width = x
        std_height = y
        resized_image = cv2.resize(image, (std_width, std_height))

    except Exception as e:
        typer.echo(f"An error occurred: {e}")

    # Convert image to grayscale
    try:
        gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

    except Exception as e:
        typer.echo(f"An error occurred during grayscale processing: {e}")

    return gray_image


@app.command()
def upload_photo_to_s3(file_name: str, object_name: str = None) -> str:
    """
    Upload photo from process_bee_photo() and return S3 URL to file
    """
    typer.echo(f"Uploading {file_name} to S3...")

    access_key = config('ACCESS_KEY')
    secret_key = config('SECRET_KEY')
    aws_region = config('REGION')
    bucket = config('BUCKET')

    session = boto3.Session(
        aws_access_key_id=access_key,
        aws_secret_access_key=secret_key,
        region_name=aws_region
    )

    s3_client = session.client('s3')

    # If S3 object_name was not specified, use file_name
    if object_name is None:
        object_name = os.path.basename(file_name)

    try:
        s3_client.upload_file(file_name, bucket, object_name, ExtraArgs={'ACL': 'public-read'})
        print(f"File {file_name} uploaded to {bucket}/{object_name}")
    except FileNotFoundError:
        print("The file was not found")
    except NoCredentialsError:
        print("Credentials not available")

    s3_file_link = f"https://{bucket}.s3.{aws_region}.amazonaws.com/{object_name}"
    print(s3_file_link)
    return s3_file_link


@app.command()
def calculate_bee_density_marvin(remote_file_path: str):
    img = marvin.Image(remote_file_path)
    result = marvin.extract(img, target=int, instructions="count the number of bees in this picture")
    typer.echo(f"Calculating bee density for {remote_file_path} using Marvin AI...")
    typer.echo(result)
    return result[0]


@app.command()
def store_bee_densities(density: int):
    """
    Store latest bee density from Marvin AI in Supabase cloud
    CREATE TABLE bee_density (
           id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
           timestamp TIMESTAMPTZ NOT NULL,
           count INTEGER NOT NULL
    );
    """
    supabase_url = config('SUPABASE_URL')
    supabase_key = config('SUPABASE_KEY')
    supabase_table_name = config('SUPABASE_TABLE_NAME')
    supabase = create_client(supabase_url, supabase_key)

    typer.echo(f"Loading bee density and time in supabase cloud database...")

    timestamp = datetime.datetime.now().isoformat()
    data = supabase.table(supabase_table_name).insert({"timestamp": timestamp, "count": density}).execute()
    return data


@app.command()
def rolling_window_analysis(window_size, threshold_factor):
    """
    https://medium.com/making-sense-of-data/time-series-next-value-prediction-using-regression-over-a-rolling-window-228f0acae363
    """
    typer.echo(f"Rolling Window analysis of the last 10 minutes of bee activity at the hive entrance") 


@app.command()
def check_swarm_event(last_n_entries: int = 10) -> bool:
    typer.echo(f"Checking if swarm event based on {last_n_entries} log entries...")


@app.command()
def notify_swarm_event():
    typer.echo("Sending notification of swarm event...")
