import time
import os
import sys

import cv2
import boto3
import pandas as pd
from botocore.exceptions import NoCredentialsError
from datetime import datetime
from decouple import config
from supabase import create_client
import marvin

try:
    from picamera2 import Picamera2, Preview
except ImportError:
    pass


class BeeMeasure:
    def __init__(self):
        self.timestamp = datetime.now()
        self.supabase_url = config("SUPABASE_URL")
        self.supabase_key = config("SUPABASE_KEY")
        self.supabase_table_name = config("SUPABASE_TABLE_NAME")
        self.access_key = config("ACCESS_KEY")
        self.secret_key = config("SECRET_KEY")
        self.aws_region = config("REGION")
        self.bucket = config("BUCKET")
        self.phoneNumber = config("CELLNUMBER")

    def run_all(self):
        """Call the pipeline in sequence"""
        file_name = self.take_landingboard_photo()
        processed_file_name = self.process_bee_photo(file_name)
        url = self.upload_photo_to_s3(processed_file_name)
        count = self.calculate_bee_density_marvin(url)
        self.store_bee_densities(url, count)
        self.check_swarm_event()

    def take_landingboard_photo(self):
        """
        Use the PiCamera2 module to take a picture of a Langstroth hive landing
        board
        """
        if sys.platform != "linux":
            print("This command is only available on Linux")
            return

        beecam = Picamera2()
        camera_config = beecam.create_preview_configuration()
        beecam.configure(camera_config)
        beecam.start_preview(Preview.NULL)
        beecam.start()
        time.sleep(2)

        # timestamp managed in class, but still using it for unique file name
        iso_datetime = self.timestamp.strftime("%Y-%m-%dT%H:%M:%S")
        file_name = f"bees-{iso_datetime}.jpg"

        beecam.capture_file(file_name)
        beecam.stop_preview()

        return file_name

    def process_bee_photo(self, file_name: str, x: int = 640, y: int = 480):
        """
        Pre-process the image specified by file_name using OpenCV
        This will include resizing the images to a standard view, converting it
        grayscale, and reducing blur

        TODO: test if this makes a difference for marvin ai? If not might skip
        """
        if not os.path.isfile(file_name):
            print(f"Error: The file {file_name} does not exist")
            return

        try:
            image = cv2.imread(file_name)
            if image is None:
                print(f"Error: the file {file_name} is not a valid image.")
                return

            std_width = x
            std_height = y
            resized_image = cv2.resize(image, (std_width, std_height))

        except Exception as e:
            print(f"An error occurred: {e}")

        try:
            gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

        except Exception as e:
            print(f"An error occurred during grayscale processing: {e}")

        # this overrides the original file (no need to backup?)
        file_name = file_name.replace(".jpg", "-gray.jpg")
        cv2.imwrite(file_name, gray_image)

        return file_name

    def upload_photo_to_s3(self, file_name: str, object_name: str = None) \
            -> str:
        """
        Upload photo from process_bee_photo() and return S3 URL to file
        """
        print(f"Uploading {file_name} to S3...")

        session = boto3.Session(
            aws_access_key_id=self.access_key,
            aws_secret_access_key=self.secret_key,
            region_name=self.aws_region
        )

        s3_client = session.client("s3")

        # If S3 object_name was not specified, use file_name
        if object_name is None:
            object_name = os.path.basename(file_name)

        try:
            s3_client.upload_file(
                file_name, self.bucket, object_name,
                ExtraArgs={"ACL": "public-read"}
            )
            print(f"File {file_name} uploaded to {self.bucket}/{object_name}")
        except FileNotFoundError:
            print("The file was not found")
        except NoCredentialsError:
            print("Credentials not available")

        s3_file_link =\
            f"https://{self.bucket}.s3.{self.aws_region}.amazonaws.com/{object_name}"
        print(s3_file_link)
        return s3_file_link

    def calculate_bee_density_marvin(self, url: str) -> int:
        img = marvin.Image(url)
        result = marvin.extract(
            img, target=int,
            instructions="count the number of bees in this picture"
        )
        return result[0]

    def store_bee_data(self, url, count):
        """
        Store latest bee density from Marvin AI in Supabase cloud
        CREATE TABLE bee_density (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            timestamp TIMESTAMPTZ NOT NULL,
            url TEXT NOT NULL,
            count INTEGER NOT NULL
        );
        """

        supabase = create_client(self.supabase_url, self.supabase_key)

        print("Loading bee density and time in supabase cloud database...")

        data = (
            supabase.table(self.supabase_table_name)
            .insert({"timestamp": str(self.timestamp),
                     "url": url,
                     "count": count})
            .execute()
        )
        return data

    def fetch_bee_data(self, start_time, end_time):
        """
        Fetch bee count data from Supabase.
        """
        supabase = create_client(self.supabase_url, self.supabase_key)
        response = supabase.table(self.supabase_table_name)\
                           .select("timestamp, count") \
                           .gte("timestamp", start_time) \
                           .lte("timestamp", end_time) \
                           .order("timestamp") \
                           .execute()

        df = pd.DataFrame(response.data)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df.set_index('timestamp', inplace=True)
        return df['count']

    def detect_swarm_event_pandas(bee_counts, window_size=10, z_threshold=3,
                                  cumulative_threshold=10):
        """
        Detect potential swarm events in bee count data.
        """

        moving_avg = bee_counts.rolling(window=window_size, center=True).mean()

        z_scores = (bee_counts - moving_avg) /\
            bee_counts.rolling(window=window_size, center=True).std()

        # Calculate cumulative deviation scores (5-minute window)
        cumulative_scores = \
            z_scores.abs().rolling(window=window_size // 2).sum()

        # Identify potential swarm events
        swarm_events = \
            cumulative_scores[cumulative_scores > cumulative_threshold]

        return swarm_events

    def _notify_swarm_event(self):
        """
        Notify Beekeeper of potential swarm event using AWS SNS
        TODO: Pass time value of event
        """
        raise NotImplementedError("Sending notification of swarm event...")

        sns = boto3.client('sns',
                           aws_access_key_id=self.access_key,
                           aws_secret_access_key=self.secret_key,
                           region_name=self.aws_region,
                           )

        response = sns.publish(
                               PhoneNumber='self.phoneNumber',
                               Message='Potential swarm event at some time'
                               )
